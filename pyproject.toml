[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "fastapi_user_management"

authors = [
  {name="pejmans21", email="pezhmansamadi21@gmail.com"},
]

classifiers = [
  "Framework :: FastAPI",
  "Programming Language :: Python :: 3",
]

description = "Project to learn FastAPI & SQLAlchemy"
readme = "README.md"
requires-python = ">=3.11, <=3.12"
keywords = [
    "API",
    "FastAPI",
    "SQLAlchemy"
]
dynamic = [
    "version",
    "dependencies",
    "optional-dependencies"
]

[project.urls]
Homepage = "https://github.com/pejmanS21/fastapi-user-management"
Repository = "https://github.com/pejmanS21/fastapi-user-management"

[tool.hatch.version]
path = "fastapi_user_management/__init__.py"

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements/requirements.in"]

[tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]
dev = ["requirements/requirements-dev.in"]
docs = ["requirements/requirements-docs.in"]
all = [
    "requirements/requirements.in",
    "requirements/requirements-dev.in",
    "requirements/requirements-docs.in"
]

# --------------------- Linting Tools ---------------------

[tool.mypy]
exclude = []
plugins = [
  "sqlmypy",
]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "fastapi_user_management"
warn_unused_ignores = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "fastapi_user_management"
ignore_missing_imports = true
check_untyped_defs = true

[tool.black]
line-length = 88
check = false
preview = true

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
    "D",  # pydocstyle
    "W",  # pep8 warnings
    "T",  # flake8-todos
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
[tool.ruff.per-file-ignores]
"__init__.py" = ["D104"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-third-party = [
    "fastapi",
    "pydantic",
    "sqlalchemy"
]

# --------------------- PyTest & Coverage ---------------------

[tool.pytest.ini_options]
addopts = [
  "-v",
  "--import-mode=importlib",
  "--tb=auto",
  "-l",
  "--strict-markers", # "--disable-pytest-warnings",
  "-ra",
  "--cov",
  "--cov-config=pyproject.toml",
  "--cov-report=html",
  "--cov-report=term",
  "--order-scope=session",
  "--order-group-scope=module",
]
log_cli = 1
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_level = "INFO"
norecursedirs = "*.egg .eggs dist build docs .tox"

markers = [
  "unit",
  "integration",
]

testpaths = [
  "tests",
]

filterwarnings = ["ignore::DeprecationWarning"]
minversion = "6.1"

[tool.coverage.run]
branch = true
concurrency = ['thread']
omit = ['*__init__*', 'run.py']
source = ["."]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:",
]
ignore_errors = true

[tool.coverage.html]
directory = "coverage_html"
