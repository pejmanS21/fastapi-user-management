# Generated by CodiumAI
import pytest

from fastapi_user_management.tools.encryption import (
    get_password_hash,
    pwd_context,
    verify_password,
)


@pytest.mark.unit()
def test_correct_password_match() -> None:
    """Tests that a correct plain password matches the correct hashed password."""
    plain_password = "password"
    hashed_password = pwd_context.hash(plain_password)
    assert verify_password(plain_password, hashed_password) is True


@pytest.mark.unit()
def test_different_correct_password_match() -> None:
    """Tests that a different correct plain password matches the correct hashed password."""
    plain_password = "password"
    different_plain_password = "different_password"
    hashed_password = pwd_context.hash(plain_password)
    assert verify_password(different_plain_password, hashed_password) is False


@pytest.mark.unit()
def test_incorrect_password_no_match() -> None:
    """Tests that an incorrect plain password does not match the correct hashed password."""
    plain_password = "password"
    incorrect_plain_password = "incorrect_password"
    hashed_password = pwd_context.hash(plain_password)
    assert verify_password(incorrect_plain_password, hashed_password) is False


@pytest.mark.unit()
def test_empty_plain_password() -> None:
    """Tests that an empty plain password does not match the correct hashed password."""
    plain_password = ""
    hashed_password = pwd_context.hash("password")
    assert verify_password(plain_password, hashed_password) is False


@pytest.mark.unit()
def test_incorrect_hashed_password() -> None:
    """Tests that a correct plain password does not match an incorrect hashed password."""
    plain_password = "password"
    incorrect_hashed_password = pwd_context.hash("incorrect_password")
    assert verify_password(plain_password, incorrect_hashed_password) is False


@pytest.mark.unit()
def test_get_password_hash() -> None:
    """Test hashing module."""
    plain_password = "password"

    hashed_password: str = get_password_hash(password=plain_password)

    assert isinstance(hashed_password, str)
    assert hashed_password != plain_password
